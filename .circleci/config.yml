version: 2.1

executors:
  python-linter:
    docker:
      - image: circleci/python:3.9

  custom-gcloud:
    docker:
      - image: google/cloud-sdk:slim

jobs:
  test:
    executor: python-linter
    steps:
      - checkout
      - run:
          name: Lint Python code
          command: |
            pip install pylint
            pylint app.py --disable=import-error || true

  deploy:
    executor: custom-gcloud
    steps:
      - checkout

      - run:
          name: ✅ Validate required environment variables
          shell: /bin/bash
          command: |
            REQUIRED_VARS=("GCP_SA_KEY_B64" "GCP_PROJECT_ID" "GCP_VM_NAME" "GCP_VM_USER" "GCP_ZONE")
            for i in "${REQUIRED_VARS[@]}"; do
              if [[ -z "${!i}" ]]; then
                echo "❌ ERROR: Missing environment variable $i"
                exit 1
              else
                echo "✅ $i is set"
              fi
            done

      - run:
          name: 🧪 Debug - Print environment variable values
          command: |
            echo "GCP_PROJECT_ID=$GCP_PROJECT_ID"
            echo "GCP_VM_NAME=$GCP_VM_NAME"
            echo "GCP_VM_USER=$GCP_VM_USER"
            echo "GCP_ZONE=$GCP_ZONE"
            echo "GCP_SA_KEY_B64 length=$(echo $GCP_SA_KEY_B64 | wc -c)"

      - run:
          name: 🔐 Authenticate with GCP
          command: |
            echo "$GCP_SA_KEY_B64" | base64 -d > gcloud-key.json
            gcloud auth activate-service-account --key-file=gcloud-key.json
            gcloud config set project "$GCP_PROJECT_ID"

      - run:
          name: 🛠 Install zip (required for packaging app)
          command: |
            apt-get update && apt-get install -y zip unzip openssh-client

      - run:
          name: 🔑 Generate SSH key to avoid prompt
          command: |
            mkdir -p ~/.ssh
            ssh-keygen -t rsa -f ~/.ssh/google_compute_engine -C $GCP_VM_USER -q -N ""

      - run:
          name: 🌐 Get external IP of GCP VM
          command: |
            export VM_IP=$(gcloud compute instances describe "$GCP_VM_NAME" \
              --zone="$GCP_ZONE" \
              --format="get(networkInterfaces[0].accessConfigs[0].natIP)")
            echo "export GCP_VM_IP=$VM_IP" >> $BASH_ENV

      - run:
          name: 📦 Zip and Transfer Flask App to VM
          command: |
            source $BASH_ENV
            zip -r app.zip . -x ".git/*"
            gcloud compute scp app.zip $GCP_VM_USER@$GCP_VM_NAME:~ --zone=$GCP_ZONE

      - run:
          name: 🚀 Build & Run Flask App on GCP VM
          command: |
            gcloud compute ssh $GCP_VM_USER@$GCP_VM_NAME \
              --zone=$GCP_ZONE \
              --command='
                mkdir -p ~/flask-app &&
                unzip -o ~/app.zip -d ~/flask-app &&
                cd ~/flask-app &&
                docker stop flask-app || true &&
                docker rm flask-app || true &&
                docker build -t flask-app . &&
                docker run -d --name flask-app -p 80:80 flask-app
              '

workflows:
  version: 2
  test-deploy:
    jobs:
      - test
      - deploy:
          requires:
            - test
