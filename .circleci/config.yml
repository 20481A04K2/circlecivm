version: 2.1

orbs:
  gcp-cli: circleci/gcp-cli@2.2.0

jobs:
  deploy:
    executor: gcp-cli/default
    steps:
      - checkout

      - run:
          name: Validate environment variables
          command: |
            for i in GCP_SA_KEY_B64 GCP_PROJECT_ID GCP_VM_NAME GCP_VM_USER GCP_ZONE; do
              if [[ -z "${!i}" ]]; then
                echo "ERROR: Missing environment variable $i"
                exit 1
              fi
            done

      - run:
          name: Authenticate with GCP
          command: |
            echo "$GCP_SA_KEY_B64" | base64 -d > gcloud-key.json
            gcloud auth activate-service-account --key-file=gcloud-key.json
            gcloud config set project "$GCP_PROJECT_ID"

      - run:
          name: Get external IP of VM
          command: |
            export GCP_VM_IP=$(gcloud compute instances describe "$GCP_VM_NAME" --zone="$GCP_ZONE" --format="get(networkInterfaces[0].accessConfigs[0].natIP)")
            echo "export GCP_VM_IP=$GCP_VM_IP" >> $BASH_ENV

      - run:
          name: Wait for SSH port
          command: |
            source $BASH_ENV
            for i in {1..10}; do
              if nc -zv "$GCP_VM_IP" 22; then
                echo "SSH port is open."
                break
              else
                echo "Waiting for SSH port..."
                sleep 5
              fi
            done

      - run:
          name: Zip and transfer app to VM
          command: |
            source $BASH_ENV
            zip -r app.zip . -x ".git/*"
            gcloud compute scp app.zip $GCP_VM_USER@$GCP_VM_NAME:~ --zone=$GCP_ZONE

      - run:
          name: Build & run Flask app on VM
          command: |
            gcloud compute ssh $GCP_VM_USER@$GCP_VM_NAME --zone=$GCP_ZONE --command='
              mkdir -p ~/flask-app &&
              unzip -o ~/app.zip -d ~/flask-app &&
              cd ~/flask-app &&
              docker stop flask-app || true &&
              docker rm flask-app || true &&
              docker build -t flask-app . &&
              docker run -d --name flask-app -p 80:80 flask-app
            '

workflows:
  version: 2
  deploy-workflow:
    jobs:
      - deploy
