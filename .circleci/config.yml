version: 2.1

orbs:
  gcp-cli: circleci/gcp-cli@2.2.0

executors:
  python-linter:
    docker:
      - image: circleci/python:3.9

jobs:
  test:
    executor: python-linter
    steps:
      - checkout
      - run:
          name: Lint Python code
          command: |
            pip install pylint
            pylint app.py --disable=import-error || true

  deploy:
    executor: gcp-cli/default
    steps:
      - checkout

      - gcp-cli/install
      - gcp-cli/initialize

      - run:
          name: Authenticate with GCP
          command: |
            echo "$GCP_SA_KEY_B64" | base64 -d > gcloud-key.json
            gcloud auth activate-service-account --key-file=gcloud-key.json
            gcloud config set project "$GCP_PROJECT_ID"

      - run:
          name: Get external IP of VM
          command: |
            export VM_IP=$(gcloud compute instances describe "$GCP_VM_NAME" \
              --zone="$GCP_ZONE" \
              --format="get(networkInterfaces[0].accessConfigs[0].natIP)")
            echo "export GCP_VM_IP=$VM_IP" >> $BASH_ENV

      - run:
          name: Wait for SSH to be ready
          command: |
            source $BASH_ENV
            for i in {1..10}; do
              if nc -zv "$GCP_VM_IP" 22; then
                echo "SSH port is open."
                break
              else
                echo "Waiting for SSH port..."
                sleep 5
              fi
            done

      - run:
          name: Zip and Transfer App
          command: |
            source $BASH_ENV
            zip -r app.zip . -x ".git/*"
            gcloud compute scp app.zip $GCP_VM_USER@$GCP_VM_NAME:~ --zone=$GCP_ZONE

      - run:
          name: Build & Run Flask App on GCE VM
          command: |
            gcloud compute ssh $GCP_VM_USER@$GCP_VM_NAME \
              --zone=$GCP_ZONE \
              --command='
                mkdir -p ~/flask-app &&
                unzip -o ~/app.zip -d ~/flask-app &&
                cd ~/flask-app &&
                docker stop flask-app || true &&
                docker rm flask-app || true &&
                docker build -t flask-app . &&
                docker run -d --name flask-app -p 80:80 flask-app
              '

workflows:
  version: 2
  test-deploy:
    jobs:
      - test
      - deploy:
          requires:
            - test
